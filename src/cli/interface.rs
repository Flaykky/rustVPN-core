use crate::config::model::ServerConfig;
use crate::connection::manager::ConnectionManager;
use crate::connection::manager::ConnectionState;
use crate::utils::logging::{log_info, log_debug};
use std::sync::Arc;

/// –ü—Ä–æ—Å—Ç–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å CLI
pub fn render_minimal_interface(
    server: &ServerConfig,
    manager: &ConnectionManager,
    state: &ConnectionState
) -> Result<(), Box<dyn std::error::Error>> {
    log_info!("[VPN: {}]", match state {
        ConnectionState::Connected => "connected",
        ConnectionState::Connecting => "connecting...",
        _ => "disconnected"
    });

    log_info!("");
    log_info!("server: {} ({})", server.tag, match &server.protocol {
        ProtocolConfig::Wireguard(wg) => format!("WireGuard: {}", wg.server_ip),
        ProtocolConfig::Shadowsocks(ss) => format!("Shadowsocks: {}", ss.server_ip),
        _ => "Other".to_string()
    });
    log_info!("in: {}:{}", 
        server.protocol.get_server_ip(), 
        server.protocol.get_server_port()
    );
    log_info!("out: {}", server.protocol.get_out_ip().unwrap_or("N/A"));

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let stats = manager.get_stats()?;
    log_info!("status:");
    log_info!("‚Üë  {} KB     ‚Üì  {} KB     Speed: {} Mbps", 
        stats.uploaded / 1024,
        stats.downloaded / 1024,
        stats.speed / 1_000_000
    );

    Ok(())
}

/// –ö—Ä–∞—Å–∏–≤—ã–π CLI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ä–∞–º–∫–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏
pub fn render_pretty_interface(
    server: &ServerConfig,
    manager: &ConnectionManager,
    state: &ConnectionState
) -> Result<(), Box<dyn std::error::Error>> {
    // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    println!("‚ï≠‚îÄ‚îÄ VPN CLIENT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ");
    println!("‚îÇ Status       : {} ‚îÇ", match state {
        ConnectionState::Connected => "‚úÖ Connected",
        ConnectionState::Connecting => "üîÑ Connecting...",
        _ => "‚ùå Disconnected"
    });
    
    // –ü—Ä–æ—Ç–æ–∫–æ–ª
    println!("‚îÇ Protocol     : {:<25} ‚îÇ", match &server.protocol {
        ProtocolConfig::Wireguard(_) => "WireGuard",
        ProtocolConfig::Shadowsocks(_) => "Shadowsocks",
        _ => "Other"
    });

    // –û–±—Ñ—É—Å–∫–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let obfuscation = match server.obfuscation.as_ref() {
        Some(oc) => match oc.obfuscation_type {
            ObfuscationType::ShadowsocksOverWireguard => "Shadowsocks",
            ObfuscationType::Fragmentation => "Fragmentation",
            ObfuscationType::Masquerade => "TLS Masquerade",
            ObfuscationType::CustomPlugin => "Custom Plugin"
        },
        None => "Disabled"
    };
    println!("‚îÇ Obfuscation  : {} ‚îÇ", format!("{}{}", 
        if obfuscation == "Disabled" { "‚ùå " } else { "‚úÖ " }, 
        obfuscation
    ).pad_to_width(25));

    // DNS (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    let dns = server.advanced_routing.as_ref()
        .and_then(|ar| ar.dns.as_ref())
        .map(|d| d.join(", "))
        .unwrap_or("Default".to_string());
    println!("‚îÇ Custom DNS   : {:<25} ‚îÇ", dns);
    println!("‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ");
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    println!("‚ï≠‚îÄ‚îÄ Server Info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ");
    println!("‚îÇ Location     : {} ‚îÇ", server.custom_tags.iter().find(|t| t.contains("geo-")).map(|t| t.replace("geo-", "")).unwrap_or("Unknown".to_string()));
    println!("‚îÇ Ingress IP   : {}:{} ‚îÇ", server.protocol.get_server_ip(), server.protocol.get_server_port());
    println!("‚îÇ Egress IP    : {} ‚îÇ", server.protocol.get_out_ip().unwrap_or("N/A"));
    println!("‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ");

    // –¢—Ä–∞—Ñ–∏–∫
    let stats = manager.get_stats()?;
    println!("‚ï≠‚îÄ‚îÄ Traffic ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ");
    println!("‚îÇ Uploaded     : {:.2} MB                ‚îÇ", stats.uploaded as f64 / 1024.0 / 1024.0);
    println!("‚îÇ Downloaded   : {:.2} MB                ‚îÇ", stats.downloaded as f64 / 1024.0 / 1024.0);
    println!("‚îÇ Speed        : ‚Üë {:.2} Mbps / ‚Üì {:.2} Mbps ‚îÇ", 
        stats.upload_speed as f64 / 125_000.0,
        stats.download_speed as f64 / 125_000.0
    );
    println!("‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ");

    Ok(())
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
trait FormatUtils {
    fn pad_to_width(&self, width: usize) -> String;
}

impl FormatUtils for &str {
    fn pad_to_width(&self, width: usize) -> String {
        let mut s = self.to_string();
        while s.len() < width {
            s.push(' ');
        }
        s
    }
}
